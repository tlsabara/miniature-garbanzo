# Generated by Django 4.1.2 on 2022-10-15 02:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models
import users.validators.main
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="GarbanzoUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("system_create_at", models.DateTimeField(auto_now_add=True)),
                ("system_edited_at", models.DateTimeField(auto_now=True)),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("groups", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "user_permissions",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("nome_completo_guser", models.CharField(max_length=255)),
                ("dt_nasc_guser", models.DateField(blank=True, null=True)),
                (
                    "cpf_guser",
                    models.CharField(
                        max_length=11, validators=[users.validators.main.validador_cpf]
                    ),
                ),
                (
                    "num_doc_guser",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "genero_guser",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("masculino", "Masculino"),
                            ("feminino", "Feminino"),
                            ("nao_me_identifico", "N達o me identifico"),
                            ("prefiro_nao_informar", "Prefiro n達o informar"),
                            ("outro", "Outro"),
                        ],
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "observacoes_guser",
                    models.TextField(blank=True, max_length=1000, null=True),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GarbanzoPerms",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("system_create_at", models.DateTimeField(auto_now_add=True)),
                ("system_edited_at", models.DateTimeField(auto_now=True)),
                ("desc_gperms", models.CharField(max_length=100)),
                (
                    "id_guser",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="HistoricalGUserPerms",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("system_create_at", models.DateTimeField(blank=True, editable=False)),
                ("system_edited_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.TextField(null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "id_gperms",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="users.garbanzoperms",
                    ),
                ),
                (
                    "id_guser",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical g user perms",
                "verbose_name_plural": "historical g user permss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGarbanzoUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("system_create_at", models.DateTimeField(blank=True, editable=False)),
                ("system_edited_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("groups", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "user_permissions",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True, max_length=254, verbose_name="email address"
                    ),
                ),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("nome_completo_guser", models.CharField(max_length=255)),
                ("dt_nasc_guser", models.DateField(blank=True, null=True)),
                (
                    "cpf_guser",
                    models.CharField(
                        max_length=11, validators=[users.validators.main.validador_cpf]
                    ),
                ),
                (
                    "num_doc_guser",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                (
                    "genero_guser",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("masculino", "Masculino"),
                            ("feminino", "Feminino"),
                            ("nao_me_identifico", "N達o me identifico"),
                            ("prefiro_nao_informar", "Prefiro n達o informar"),
                            ("outro", "Outro"),
                        ],
                        max_length=30,
                        null=True,
                    ),
                ),
                (
                    "observacoes_guser",
                    models.TextField(blank=True, max_length=1000, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.TextField(null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical garbanzo user",
                "verbose_name_plural": "historical garbanzo users",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalGarbanzoPerms",
            fields=[
                (
                    "id",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                ("system_create_at", models.DateTimeField(blank=True, editable=False)),
                ("system_edited_at", models.DateTimeField(blank=True, editable=False)),
                ("desc_gperms", models.CharField(max_length=100)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.TextField(null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "id_guser",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical garbanzo perms",
                "verbose_name_plural": "historical garbanzo permss",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="GUserPerms",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("system_create_at", models.DateTimeField(auto_now_add=True)),
                ("system_edited_at", models.DateTimeField(auto_now=True)),
                (
                    "id_gperms",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.garbanzoperms",
                    ),
                ),
                (
                    "id_guser",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
